package tk.germanbot.data

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperFieldModel.DynamoDBAttributeType.S
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTyped
import org.socialsignin.spring.data.dynamodb.repository.EnableScan
import org.springframework.data.repository.CrudRepository
import tk.germanbot.service.EntityValidationException
import java.util.Date

const val QUIZ_TABLE_NANE = "german_bot_quiz"

@DynamoDBTable(tableName = QUIZ_TABLE_NANE)
data class Quiz(
        @DynamoDBHashKey
        @DynamoDBAutoGeneratedKey
        var id: String? = null,
        @DynamoDBAttribute

        @DynamoDBTyped(S)
        var date: Date? = Date(),
        @DynamoDBAttribute
        var createdBy: String?,
        @DynamoDBAttribute
        var question: String?,
        @DynamoDBAttribute
        var answers: Set<String>?,
        @DynamoDBAttribute
        var topics: Set<String>?
) {
    fun validate() {
        if (answers == null || answers!!.isEmpty()) throw EntityValidationException(Quiz::class, "No answers for quiz $id")
        if (topics == null || topics!!.isEmpty()) throw EntityValidationException(Quiz::class, "No topics for quiz $id")
    }
}

interface QuizId {
    var id: String?
}

@EnableScan
interface QuizRepository : CrudRepository<Quiz, String> {
    fun save(quiz: Quiz): Quiz

    override fun findAll(): List<Quiz>

    fun findOneById(id: String): Quiz?

    fun findByTopicsContaining(topics: String): List<Quiz>

    fun findTop5ByIdGreaterThan(randomKey: String): List<Quiz>

    fun findTop5ByIdLessThan(randomKey: String): List<Quiz>
}

